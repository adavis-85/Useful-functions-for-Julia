{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BCM (generic function with 1 method)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function BCM(A)\n",
    "    a,b,c=size(A)\n",
    "    thematrix=Matrix{Float64}(undef,a*c,b*c)\n",
    "    \n",
    "    j=1\n",
    "    jump=a\n",
    "    \n",
    "    ##First column of the ac,bc matrix is the block array form of the tensor.  \n",
    "    ##There is a separate function for this by itself\n",
    "    \n",
    "    for i=1:c\n",
    "     thematrix[j:jump,1:b]=A[:,:,i]\n",
    "        j=j+a\n",
    "        jump=jump+a\n",
    "    end\n",
    "    \n",
    "    ##Incrementing the circular shift for the prescribed width of the columns\n",
    "    \n",
    "    jump=b+1\n",
    "    i=1\n",
    "    for j=2:c\n",
    "        thematrix[:,jump:b*j]=circshift(thematrix[:,1:b],a*i)\n",
    "        jump=jump+b\n",
    "        i=i+1\n",
    "    end\n",
    "    return thematrix\n",
    "end\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9Ã—9 Array{Float64,2}:\n",
       " 3.0  3.0  2.0  1.0  1.0  2.0  2.0  1.0  1.0\n",
       " 2.0  2.0  3.0  1.0  1.0  2.0  3.0  1.0  1.0\n",
       " 3.0  2.0  1.0  3.0  1.0  2.0  2.0  1.0  3.0\n",
       " 2.0  1.0  1.0  3.0  3.0  2.0  1.0  1.0  2.0\n",
       " 3.0  1.0  1.0  2.0  2.0  3.0  1.0  1.0  2.0\n",
       " 2.0  1.0  3.0  3.0  2.0  1.0  3.0  1.0  2.0\n",
       " 1.0  1.0  2.0  2.0  1.0  1.0  3.0  3.0  2.0\n",
       " 1.0  1.0  2.0  3.0  1.0  1.0  2.0  2.0  3.0\n",
       " 3.0  1.0  2.0  2.0  1.0  3.0  3.0  2.0  1.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##To test the accuracy we specify a small enough tensor.\n",
    "t=rand(1:3,3,3,3)\n",
    "\n",
    "q=BCM(t)\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 1.0.3",
   "language": "julia",
   "name": "julia-1.0"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.0.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
